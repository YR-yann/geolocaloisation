
import tempfile
import wave

import speech_recognition as sr
import streamlit as st
from spellchecker import SpellChecker

st.title("üé§ √âvaluation & Entra√Ænement √† l'√âloquence")

st.markdown("""
Enregistre-toi ou t√©l√©verse un fichier `.wav` avec ta voix.  
Nous allons te donner une transcription, corriger ton texte, et t‚Äôindiquer les axes d‚Äôam√©lioration ‚ú®
""")

# Upload de l'audio
uploaded_file = st.file_uploader("üéôÔ∏è T√©l√©verse ton audio (.wav uniquement)", type=["wav"])

if uploaded_file is not None:
    st.audio(uploaded_file, format='audio/wav')
    st.success("Fichier charg√© avec succ√®s !")

    # Transcription vocale
    recognizer = sr.Recognizer()
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_audio:
        temp_audio.write(uploaded_file.read())
        temp_audio_path = temp_audio.name

    with sr.AudioFile(temp_audio_path) as source:
        audio_data = recognizer.record(source)
        try:
            transcription = recognizer.recognize_google(audio_data, language="fr-FR")
            st.subheader("üìù Transcription brute")
            st.write(transcription)

            # Analyse IA simplifi√©e
            # 1. Mots parasites
            filler_words = ["euh", "donc", "bah", "hein", "voil√†"]
            found_fillers = [word for word in filler_words if word in transcription.lower()]
            st.subheader("‚ö†Ô∏è Mots parasites d√©tect√©s")
            if found_fillers:
                st.write(f"Tu as utilis√© : {', '.join(found_fillers)}. Essaie de les √©viter üßò")
            else:
                st.write("Aucun mot parasite d√©tect√©. Clean üî•")

            # 2. Correction orthographique
            spell = SpellChecker(language="fr")
            words = transcription.split()
            misspelled = spell.unknown(words)
            corrected = {word: spell.correction(word) for word in misspelled}

            st.subheader("üß† Corrections orthographiques propos√©es")
            if corrected:
                for wrong, fix in corrected.items():
                    st.markdown(f"- **{wrong}** ‚Üí {fix}")
            else:
                st.write("Aucune faute d√©tect√©e. C‚Äôest nickel !")

            # 3. Score d'√©locution (tr√®s simple pour commencer)
            word_count = len(words)
            filler_count = len(found_fillers)
            score = max(0, 100 - filler_count * 10 - len(corrected) * 5)
            st.subheader("üéØ Score d‚Äô√©loquence (simul√©)")
            st.metric("Score /100", score)

        except sr.UnknownValueError:
            st.error("Impossible de reconna√Ætre la parole. R√©essaye avec un fichier plus clair.")
        except sr.RequestError:
            st.error("Erreur de connexion avec l'API Google Speech Recognition.")
